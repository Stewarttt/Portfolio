Question 1: "Does this Node Appear in this Graph?"
	Type: findNodeInGraph -Node -Graph
	Example: findNodeInGraph 4 (Union (Union (Single 4) (Union (Union (Single 5) (Single 4) [(5,5), (6,6), (7,7)]) (Union (Single 4) (Single 23) [(1,3), (2,4), (2,3)]) [(22,32)]) [(1,3), (1,3), (1,3)]) (Single 3) [(1, 3), (3, 1), (22, 34)])
		Returns: True
	Example: findNodeInGraph 114 (Union (Union (Single 4) (Union (Union (Single 5) (Single 4) [(5,5), (6,6), (7,7)]) (Union (Single 4) (Single 23) [(1,3), (2,4), (2,3)]) [(22,32)]) [(1,3), (1,3), (1,3)]) (Single 3) [(1, 3), (3, 1), (22, 34)])
		Returns: False
Question 2: Question 2: "Does this Edge Appear in this Graph?"
	Type: checkEdgeInGraph -Edge -Graph
	Example: checkEdgeInGraph (5,5) (Union (Union (Single 4) (Union (Union (Single 5) (Single 4) [(5,5), (6,6), (7,7)]) (Union (Single 4) (Single 23) [(1,3), (2,4), (2,3)]) [(22,32)]) [(1,3), (1,3), (1,3)]) (Single 3) [(1, 3), (3, 1), (22, 34)])
		Returns: True
	Example: checkEdgeInGraph (50,5) (Union (Union (Single 4) (Union (Union (Single 5) (Single 4) [(5,5), (6,6), (7,7)]) (Union (Single 4) (Single 23) [(1,3), (2,4), (2,3)]) [(22,32)]) [(1,3), (1,3), (1,3)]) (Single 3) [(1, 3), (3, 1), (22, 34)])
		Returns: False
Question 3: Question 3: "List All Nodes that Appear in this Graph"
	Type: getEdgesInGraph -Graph
	Example: getNodesInGraph (Union (Single 1) (Union (Single 2) (Union (Single 3) (Single 4) []) [(3, 2), (4, 2)]) [(1, 3), (1, 4), (2, 1)])
		Returns: [1,2,3,4]
Question 4: "List All Edges that Appear in this Graph"
	Type: getEdgesInGraph -Graph
	Example: getEdgesInGraph (Union (Single 1) (Union (Single 2) (Union (Single 3) (Single 4) []) [(3, 2), (4, 2)]) [(1, 3), (1, 4), (2, 1)])
		Returns: [(1,3),(1,4),(2,1),(3,2),(4,2)]
Question 5: "Is this Graph a Singleton?"
	Type isSingleton -Graph
	Example: isSingleton (Single 1)
		Returns: True
	Example: isSingleton (Union (Single 1) (Union (Single 2) (Union (Single 3) (Single 4) []) [(3, 2), (4, 2)]) [(1, 3), (1, 4), (2, 1)])
		Returns: False
Question 6: "Compute a Breadth-First Search Traversal"
	Type: bfsEntry -Graph -Node
	Example: bfsEntry (Union (Union (Single 1) (Single 2) [(1,3)]) (Single 3) [(3,2)]) 1
		Result: [1,3,2]
	Example: bfsEntry (Union (Union (Single 1) (Single 2) [(1,3)]) (Union (Single 3) (Union (Single 4) (Union (Single 5) (Single 6) []) [])[]) [(3,2), (3,4), (3,5), (3,6)]) 1
		Result: [1,3,2,4,5,6]
	Example: bfsEntry (Union (Union (Single 1) (Single 2) [(1,3)]) (Union (Single 3) (Union (Single 4) (Union (Single 5) (Single 6) []) [])[]) [(3,2), (3,4), (3,5), (3,6)]) 3
		Result: [3,2,4,5,6]
	Example: bfsEntry (Union (Union (Single 1) (Single 2) [(1,3)]) (Union (Single 3) (Union (Single 4) (Union (Single 5) (Single 6) []) [])[]) [(3,2), (3,4), (3,5), (3,6)]) 6
		Result: [6]
	Example: bfsEntry (Union (Union (Single 1) (Single 2) [(1,3)]) (Union (Single 3) (Union (Single 4) (Union (Union (Single 5) (Single 7) [(1,7)]) (Single 6) [(6,5), (6,6)]) [(5,4)])[(4,3)]) [(3,2), (3,4), (3,5), (3,6)]) 1
		Result: [1,3,7,2,4,5,6]
Question 7: "Create a Graph from an Adjacency List"
	Type: graphFromAdjacencyList -[(Node, [Node])]
	Example: graphFromAdjacencyList [(1, [3, 4]), (2, [1]), (3, [2]), (4, [2])]
		Returns: Union (Single 1) (Union (Single 2) (Union (Single 3) (Single 4) [(3,2),(4,2)]) [(2,1)]) [(1,3),(1,4)]
Question 8: "Create a Graph from an Adjacency Matrix"
	Type: graphFromAdjacencyMatrix -[[Bool]]
	Example: graphFromAdjacencyMatrix [[False, False, True, True], [True, False, False, False], [False, True, False, False], [False, True, False, False]]
		Returns: Union (Single 1) (Union (Single 2) (Union (Single 3) (Single 4) [(3,2),(4,2)]) [(2,1)]) [(1,3),(1,4)]	